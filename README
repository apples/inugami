README

Inugami Version: 0.1

Inugami is a framework designed for rapid prototyping of games.

It is intended for small projects, however, it scales very well, and should make a good base for any project.

Please note that Inugami is built for my personal needs, and may not be suitable for every project.

As of this writing, Inugami is INCOMPLETE and may contain several errors. If you plan on using Inugami in your own project, please consider contacting me for usability information.

Full documentation is embedded with Doxygen comments.

Current features are:
    OBJ model loading (limited)
    Texture loading
    Shader loading
    Scheduling
    Math and utilities
    Keyboard and mouse interface
    2D animated sprites
    Priority logging
    Multiple windows
    
Current limitations are:
    Models do not support animation
    No support for 3D textures
    
Note that Inugami is only meant for graphics, and other systems, such as audio, networking, and physics, must be found elsewhere.

COMPILING:

Inugami depends on the following software libraries:
    GLEW    	1.9.0
    GLFW    	3.0
    GLM     	0.9.3.3
    libpng		1.2.49

The demo program depends on these additional libraries:
    libnoise	1.0.0
    
Inugami is designed to be compiled together with your project, for easy tweaking, but it should work just fine as a static library or DLL or whatever. I recommend using the demo project as a template.

BASIC USAGE:

You must create a Core to use the framework.
It is recommended to use the scheduler via Core::addCallback(...).
If a callback has a negative frequency, it is called as often as possible.

If you want multiple windows, simply create multiple Cores.

Use the Core's Interface "iface" to grab keyboard and mouse input.
Make sure to call iface->poll() every frame.

All GLFW and OpenGL functions should work as normal.
Your drawing routine must start with Core::beginFrame() and end with Core::endFrame().

Create a camera and use it with Core::applyCam().

The Transformation class allows you to easy handle matrices.

Texture images are loaded when a Texture object is created. If a texture file has already been loaded, the resource is shared.

Please see the demo project for a decent example of usage.

LISCENSE:

Inugami is liscensed under the unmodified zlib/libpng liscense. Full text can be found below, or at http://opensource.org/licenses/zlib-license.php.

/*******************************************************************************

Copyright (c) 2012 Jeramy Harrison

This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.

Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

    2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

    3. This notice may not be removed or altered from any source distribution.

*******************************************************************************/

For those unfamiliar, this basically means that you can do whatever you want with the source code as long as you don't claim ownership or remove the liscense.

CONTACT INFO:

Jeramy Harrison
dbralir@gmail.com
